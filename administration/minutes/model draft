object Course
	components: p:Page* and r:Roster and privateClass:bool and name:string and chatRoom:string and Stats and text:string*;
	operations: AddPage and RemovePage and SetPrivate and EditCourse; 
end Course; 

operation AddPage
end AddPage;

operation RemovePage
end RemovePage;

operation SetPrivate
end SetPrivate;

object Page
	compenents: prevPage and nextPage and prereq;
end Page;

object Lesson implements Page
	components: text:string* and code:string* and subtopic:Page*;
	operations: AddPage and RemovePage EditLesson;
end Lesson;

object Quiz implements Page
	components: Question* and text:string* and title:string and prereq and Path and hidden:boolean;
	operations: AddQuestion and RemoveQuestion and EditQuiz and SubmitAnswers and CheckAnswers;
end Quiz;

object Question
	componets: text:string* and question:string;
	operations:  
end Question;

object MultipleChoiceQuestion implements Question
	components: Answer+;
	operations:
end MultipleChoiceQuestion;

object Answer
	componenets: answer:string correct:boolean;
	operations:
end Answer
object CodeQuestion implements Questions
	components: 
end CodeQuestion;

object Roster
	components: (User, Permissions)*;
end Roster; 

object User
	components: boolean isInstructor and String userName and String password Course enrolled* and (Lesson, Quiz, int score)* (work in progress);
end User;

object Permissions
	components: bool view and bool edit and bool manage and bool stats;
end Permissions;



OPERATIONS LIST:

Jon - user related

addUser
removeUser
setUserPermissions
updateRoster

Russell 

login
logout

Matt

createCourse
removeCourse
createLesson
removeLesson
removePage

Evan

createQuiz
addQuestion
removeQuestion

James

clearStatistics
displayStats
getStats

operation getNextPage
   inputs: Page;
   outputs: Page;
   description: (*Takes in a Page, and returns the next logical page.*);
end getNextPage;

operation getPrevPage
   inputs: Page;
   outputs: Page;
   description: (*Takes in a Page, and returns the previous logical page.*);
end getPrevPage;

operation displayPage
   inputs: Page;
   outputs: String;
   description:  (*Takes in a page and returns the content to display *);
end displayPage;

operation movePage;
   inputs: Page, Page;
   outputs: bool;
   description: (*Takes in two pages, the page to move and the page to 
                 place the moved page after, and moves the first page to be
                 the "next" of the second Page.  Returns boolean indicating 
                 success *);
end movePage;

//RUSSELL MEZZETTA

operation login
	inputs: username, password, database;
	outputs: ...;
	description: (* Takes in username and password then checks server to see if there is a
						match. If so then it grants access *);
end login;
	
operation logout
	inputs: userdata, database;
	outputs: ...;
	description: (* saves all user data to the server *);
end logout;


//JON INLOES

operation addUser
	components:
	inputs: name:string and roster:Roster;
	outputs: updatedRoster:Roster;
	description: (* addUser adds the given string name into the Roster and produces an updated Roster. *);
end addUser;

operation removeUser
	components:
	inputs: name:string* and roster:Roster;
	outputs: ouputs updatedRoster:Roster;
	description: (* removeUser removes the inputed string names from the roster and produces an updated Roster. *);
end removeUser;

operation setUserPermissions
	components:
	inputs: (name:string and edit:boolean and manage:boolean and states:boolean)*;
	outputs: updatedRoster:Roster;
	description: (* setUserPermissions will take in a list of tuples consisting of a string name, boolean edit, boolean manage, and boolean states and will produce an updated Roster with the new user permissions. *)
end setUserPermissions;

operation updateRoster
	components:
	inputs: roster:Roster
	outputs: updated:roster
	description: (* updateRoster will take in a roster and make the changes to a roster final. *)
end updateRoster;
